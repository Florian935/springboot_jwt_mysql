package com.javainuse.config;

import com.javainuse.service.UserDetailsServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

// Check that token is valid in each called request (refer to config method, addFilterBefore in WebSecurityConfig class.
// In addFilterBefore we specify that this filter class need to be apply before the UsernamePasswordAuthenticationFilter)
@Component
public class JwtRequestFilter extends OncePerRequestFilter {

	private static final Logger logger = LoggerFactory.getLogger(JwtRequestFilter.class);

	@Autowired
	private UserDetailsServiceImpl userDetailsServiceImpl;

	@Autowired
	private JwtTokenUtil jwtTokenUtil;

	public final String AUTHORIZATION = "Authorization";

	private final String BEARER = "Bearer ";

	private final int BEARER_LENGHT = 7;

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
			throws ServletException, IOException {

//		final String requestTokenHeader = request.getHeader("Authorization");
//
//		String username = null;
//		String jwtToken = null;
//		// JWT Token is in the form "Bearer token". Remove Bearer word and get
//		// only the Token
//		if (requestTokenHeader != null && requestTokenHeader.startsWith("Bearer ")) {
//			jwtToken = requestTokenHeader.substring(7);
//			try {
//				username = jwtTokenUtil.getUsernameFromToken(jwtToken);
//			} catch (IllegalArgumentException e) {
//				System.out.println("Unable to get JWT Token");
//			} catch (ExpiredJwtException e) {
//				System.out.println("JWT Token has expired");
//			}
//		} else {
//			logger.warn("JWT Token does not begin with Bearer String");
//		}

		// If we have a token, it's that the token in the request was valid so we can set the authentication.
//		The "validateJwtToken" in the if condition below ensure that we have a username, that the token isn't expired
//		and too that the token is valid (signature, secret, algorithm, claims etc).

//		Before, we had in if condition "SecurityContextHolder.getContext().getAuthentication() == null" but is useless
//		too and always return true because each request of the client create a local thread so the SecurityContext
//		is never set before this JwtRequest filter. This is the role of this filter to set the SecurityContext.
//		Also, before, we retrieve the username from the database and compare with the username extracted from the jwt
//		in a validationToken method. But it's useless: if we have a jwt with a valid username, it's because this jwt
//		was before generated by the API by calling database and retrieve this username. So it was redundant.
//		if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
		try {
			String jwt = parseJwt(request);
			if (jwt != null && jwtTokenUtil.validateJwtToken(jwt)) {
				String username = jwtTokenUtil.getUsernameFromJwtToken(jwt);

				UserDetails userDetails = userDetailsServiceImpl.loadUserByUsername(username);
				UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(
						userDetails, null, userDetails.getAuthorities());
				// After setting the Authentication in the context, we specify
				// that the current user is authenticated. So it passes the
				// Spring Security Configurations successfully.
				SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
			}
		} catch (Exception e) {
			logger.error("Cannot set user authentication: {}", e.getMessage());
		}

		chain.doFilter(request, response);
	}

	private String parseJwt(HttpServletRequest request) {
		String headerAuth = request.getHeader(AUTHORIZATION);
		if (StringUtils.hasText(headerAuth) && headerAuth.startsWith(BEARER)) {
			return headerAuth.substring(BEARER_LENGHT);
		}

		return null;
	}

}